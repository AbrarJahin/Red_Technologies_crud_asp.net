// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StartupProject_Asp.NetCore_PostGRE.Data;

namespace StartupProject_Asp.NetCore_PostGRE.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221205174852_OrderAndProductTableUpdated")]
    partial class OrderAndProductTableUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "3.1.30");

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.AppData.Order", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("CreateTime")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnName("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaid")
                        .HasColumnName("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("LastUpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<float>("OrderTotal")
                        .HasColumnName("OrderTotal")
                        .HasColumnType("REAL");

                    b.Property<int>("OrderType")
                        .HasColumnName("OrderType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.AppData.OrderProduct", b =>
                {
                    b.Property<Guid?>("OrderId")
                        .HasColumnName("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnName("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("CreateTime")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("LastUpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitBought")
                        .HasColumnName("UnitBought")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.AppData.Product", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AvailableUnit")
                        .HasColumnName("AvailableUnit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("CreateTime")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("LastUpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(32767);

                    b.Property<float>("UnitPrice")
                        .HasColumnName("UnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Role","Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c913e5e6-d4c7-436e-b0f3-f95f7c02b6bd"),
                            ConcurrencyStamp = "f111c2a7-8d30-4561-8e92-471c1444e83b",
                            Description = "12/5/2022 5:48:51 PM",
                            Name = "Super-Admin",
                            NormalizedName = "SUPER-ADMIN"
                        });
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim","Identity");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClaimType = "SuperAdmin_All",
                            ClaimValue = "SuperAdmin.All",
                            RoleId = new Guid("c913e5e6-d4c7-436e-b0f3-f95f7c02b6bd")
                        },
                        new
                        {
                            Id = -2,
                            ClaimType = "Role_Create",
                            ClaimValue = "Role.Create",
                            RoleId = new Guid("c913e5e6-d4c7-436e-b0f3-f95f7c02b6bd")
                        },
                        new
                        {
                            Id = -3,
                            ClaimType = "Role_Read",
                            ClaimValue = "Role.Read",
                            RoleId = new Guid("c913e5e6-d4c7-436e-b0f3-f95f7c02b6bd")
                        },
                        new
                        {
                            Id = -4,
                            ClaimType = "Role_Update",
                            ClaimValue = "Role.Update",
                            RoleId = new Guid("c913e5e6-d4c7-436e-b0f3-f95f7c02b6bd")
                        },
                        new
                        {
                            Id = -5,
                            ClaimType = "Role_Delete",
                            ClaimValue = "Role.Delete",
                            RoleId = new Guid("c913e5e6-d4c7-436e-b0f3-f95f7c02b6bd")
                        },
                        new
                        {
                            Id = -6,
                            ClaimType = "Claim_Create",
                            ClaimValue = "Claim.Create",
                            RoleId = new Guid("c913e5e6-d4c7-436e-b0f3-f95f7c02b6bd")
                        },
                        new
                        {
                            Id = -7,
                            ClaimType = "Order_View",
                            ClaimValue = "Order.View",
                            RoleId = new Guid("c913e5e6-d4c7-436e-b0f3-f95f7c02b6bd")
                        },
                        new
                        {
                            Id = -8,
                            ClaimType = "Order_Delete",
                            ClaimValue = "Order.Delete",
                            RoleId = new Guid("c913e5e6-d4c7-436e-b0f3-f95f7c02b6bd")
                        });
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("User","Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("821a283f-ba76-44a8-a2ab-2b794cc9f247"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed139a77-614d-4766-9179-a9c14841ebe4",
                            Email = "abrar@jahin.com",
                            EmailConfirmed = true,
                            FirstName = "Abrar",
                            LastName = "Jahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABRAR@JAHIN.COM",
                            NormalizedUserName = "ABRAR",
                            PasswordHash = "AQAAAAEAACcQAAAAEHL01BLWt5xM94DDY34okP/IxlSyUZF53ml8w8dyLTjN9YOUcnDKv+5NKyLmaVnoOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "638058413314997062_fc10c069-3959-44a4-849f-4fd6609fcee2",
                            TwoFactorEnabled = false,
                            UserName = "abrar",
                            UsernameChangeLimit = 10
                        });
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserClaim","Identity");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClaimType = "SuperAdmin_All",
                            ClaimValue = "SuperAdmin.All",
                            UserId = new Guid("821a283f-ba76-44a8-a2ab-2b794cc9f247")
                        },
                        new
                        {
                            Id = -2,
                            ClaimType = "Role_Create",
                            ClaimValue = "Role.Create",
                            UserId = new Guid("821a283f-ba76-44a8-a2ab-2b794cc9f247")
                        },
                        new
                        {
                            Id = -3,
                            ClaimType = "Role_Read",
                            ClaimValue = "Role.Read",
                            UserId = new Guid("821a283f-ba76-44a8-a2ab-2b794cc9f247")
                        },
                        new
                        {
                            Id = -4,
                            ClaimType = "Role_Update",
                            ClaimValue = "Role.Update",
                            UserId = new Guid("821a283f-ba76-44a8-a2ab-2b794cc9f247")
                        },
                        new
                        {
                            Id = -5,
                            ClaimType = "Role_Delete",
                            ClaimValue = "Role.Delete",
                            UserId = new Guid("821a283f-ba76-44a8-a2ab-2b794cc9f247")
                        },
                        new
                        {
                            Id = -6,
                            ClaimType = "Claim_Create",
                            ClaimValue = "Claim.Create",
                            UserId = new Guid("821a283f-ba76-44a8-a2ab-2b794cc9f247")
                        },
                        new
                        {
                            Id = -7,
                            ClaimType = "Order_View",
                            ClaimValue = "Order.View",
                            UserId = new Guid("821a283f-ba76-44a8-a2ab-2b794cc9f247")
                        },
                        new
                        {
                            Id = -8,
                            ClaimType = "Order_Delete",
                            ClaimValue = "Order.Delete",
                            UserId = new Guid("821a283f-ba76-44a8-a2ab-2b794cc9f247")
                        });
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginIp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserLogin","Identity");
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReasonForAdding")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RoleId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("UserRole","Identity");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("821a283f-ba76-44a8-a2ab-2b794cc9f247"),
                            RoleId = new Guid("c913e5e6-d4c7-436e-b0f3-f95f7c02b6bd"),
                            ReasonForAdding = "Created During Migration"
                        });
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("UserId1");

                    b.ToTable("UserToken","Identity");
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.AppData.Order", b =>
                {
                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.AppData.OrderProduct", b =>
                {
                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.AppData.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.AppData.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.RoleClaim", b =>
                {
                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.UserClaim", b =>
                {
                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.UserLogin", b =>
                {
                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.UserRole", b =>
                {
                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId1");

                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.UserToken", b =>
                {
                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartupProject_Asp.NetCore_PostGRE.Data.Models.Identity.User", null)
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
